{"version":3,"sources":["state-manager/actionsTypes.js","state-manager/reducer.js","available-devices.js","state-manager/class-model.js","actions.js","components/AddButton.js","components/RoomInput.js","components/SwitchSlider.js","components/TrashButton.js","components/DeleteMessage.js","components/RoomCard.js","components/HomePage.js","components/DeviceCard.js","components/DeviceInput.js","components/RoomPage.js","components/Loader.js","App.js","state-manager/localStorageManager.js","config.js","index.js"],"names":["actionsTypes","SET_STORAGE","ADD_ROOM","REMOVE_ROME","TOGGLE_ROOM","ADD_DEVICE","REMOVE_DEVICE","TOGGLE_DEVICE","SET_SLIDER","reducer","state","action","type","payload","newStorage","addRoom","newRoom","removeRoom","removedRoomId","produce","draft","roomList","toggledRoomId","toggleRoom","roomId","deviceName","addDevice","deviceId","removeDevice","deviceList","toggleSwitch","sliderValue","numericValue","setSliderValue","availableDevices","Lamp","name","slider","isNonToggled","icon","faLightbulb","sliderDescription","sliderUnits","sliderRange","defaultValue","Fridge","faSnowflake","faWind","TV","faTv","Device","undefined","Error","this","immerable","powerOn","id","uuidv4","newValue","Room","roomSwitchOn","previouslyPowerOn","newDevice","push","splice","filter","device","map","includes","Home","owner","createDefaultRoom","roomName","defaultRoom","fridge","lamp","defaultWC","lampWC","setNewStorage","AddButton","onClick","className","faPlus","RoomInput","setIsRoomAdd","isRoomAdd","setRoomName","cancelInput","useRef","handleClickOutside","e","current","contains","target","useEffect","document","addEventListener","removeEventListener","ref","placeholder","onChange","value","SwitchSlider","toggleAction","checkedValue","stopPropagation","checked","TrashButton","preventDefault","faTrash","DeleteMessage","deleteAction","CancelAction","elementName","RoomCard","room","delRoom","useState","roomRemoved","setRoomRemoved","to","length","HomePage","addNewRoom","homeState","roomsContainer","src","alt","alert","DeviceCard","toggleDevice","setSlider","deleteDevice","deviceRemoved","setDeviceRemoved","deviceInfo","deviceSlider","handleSlider","minRange","maxRange","min","max","onMouseUp","onTouchEnd","Number","infoText","DeviceInput","isDeviceAdded","setIsDeviceAdd","setDeviceName","deviceOption","optionNr","defaultOptionValue","disabled","propName","key","option","RoomPage","dispatch","match","setIsDeviceAdded","currentRoomId","params","currentRoom","actions","devicesContainers","faArrowLeft","LoaderSpinner","color","height","width","timeout","NAME","App","useReducer","localStorage","getItem","storedProjects","JSON","parse","Object","setPrototypeOf","prototype","getLocalStorage","element","stringify","setItem","setLocalStorage","Loader","basename","exact","path","component","m","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6bdcf01a.chunk.js","sourcesContent":["const actionsTypes = {\n    SET_STORAGE: 'setStorage',\n    ADD_ROOM: 'addRoom', \n    REMOVE_ROME: 'removeRoom', \n    TOGGLE_ROOM: 'toggleRoom', \n    ADD_DEVICE: 'addDevice', \n    REMOVE_DEVICE: 'removeDevice', \n    TOGGLE_DEVICE: 'toggleDevice', \n    SET_SLIDER: 'setSlider',\n};\n\nexport default actionsTypes;\n","import actionsTypes from './actionsTypes';\nimport { produce } from 'immer';\n\n//Reducer for state management. \nconst reducer = (state, action) => {\n    //Switch for different actions on the state. \n    switch (action.type) {\n\n    case actionsTypes.SET_STORAGE: \n        return action.payload.newStorage;\n\n    case actionsTypes.ADD_ROOM: \n        return state.addRoom(action.payload.newRoom);\n    case actionsTypes.REMOVE_ROME: \n        return state.removeRoom(action.payload.removedRoomId);\n\n    case actionsTypes.TOGGLE_ROOM: \n        return produce(state, draft => {\n            draft.roomList[action.payload.toggledRoomId] = draft.roomList[action.payload.toggledRoomId].toggleRoom();\n        });\n\n    case actionsTypes.ADD_DEVICE: \n        return produce(state, draft => {\n            const roomId = action.payload.roomId;\n            const deviceName = action.payload.deviceName;\n            draft.roomList[roomId] =  draft.roomList[roomId].addDevice(deviceName);\n        });\n\n    case actionsTypes.REMOVE_DEVICE: \n        return produce(state, draft => {\n            const roomId = action.payload.roomId;\n            const deviceId = action.payload.deviceId;\n            draft.roomList[roomId] =  draft.roomList[roomId].removeDevice(deviceId);\n        });\n        \n    case actionsTypes.TOGGLE_DEVICE:\n        return produce(state, draft => {\n            const roomId = action.payload.roomId;\n            const deviceId = action.payload.deviceId;\n            draft.roomList[roomId].deviceList[deviceId] = draft.roomList[roomId].deviceList[deviceId].toggleSwitch();\n        });\n\n    case actionsTypes.SET_SLIDER:\n        return produce(state, draft => {\n            const roomId = action.payload.roomId;\n            const deviceId = action.payload.deviceId;\n            const sliderValue = action.payload.numericValue;\n            draft.roomList[roomId].deviceList[deviceId] = draft.roomList[roomId].deviceList[deviceId].setSliderValue(sliderValue);\n        });\n\n    default:\n        return state;\n    }\n};\n\nexport default reducer;\n","import { faLightbulb, faSnowflake, faWind, faTv } from '@fortawesome/free-solid-svg-icons';\n\nconst availableDevices = {\n    Lamp: {\n        name: 'Lamp',\n        slider: true,\n        isNonToggled: false,\n        icon: faLightbulb,\n        sliderDescription: 'Brightness',\n        sliderUnits: '%',\n        sliderRange: [0, 100],\n        defaultValue: 50\n    },\n\n    Fridge: {\n        name: 'Fridge',\n        slider: false,\n        isNonToggled: true,\n        icon: faSnowflake\n    },\n\n    'Air conditioner': {\n        name: 'Air conditioner',\n        slider: true,\n        isNonToggled: false,\n        icon: faWind,\n        sliderDescription: 'Temperature',\n        sliderUnits: '\\u00B0C',\n        sliderRange: [16, 30],\n        defaultValue: 20\n    },\n\n    TV: {\n        name: 'TV',\n        slider: true,\n        isNonToggled: false,\n        icon: faTv,\n        sliderDescription: 'Volume',\n        sliderUnits: '%',\n        sliderRange: [0, 100],\n        defaultValue: 30\n    }\n};\n\nexport default availableDevices;","import {immerable, produce} from 'immer';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport availableDevices from '../available-devices';\n\n//File for class model for state-structure. \n\nclass Device {\n\n    constructor(name) {\n        /*Device constructor get one arguments name: \n        string, rest of arguments are taken from availableDevices file.\n        Device is immerable class to ensure state immutable*/\n        if (availableDevices[name] === undefined) {\n            throw new Error('No such device!');\n        }\n        this[immerable] = true;\n        this.name = availableDevices[name].name;\n        this.slider = availableDevices[name].slider; \n        this.isNonToggled = availableDevices[name].isNonToggled;\n        this.powerOn = true;\n        this.id = uuidv4();\n        if (this.slider) {\n            this.sliderValue = availableDevices[name].defaultValue;\n            this.sliderRange = availableDevices[name].sliderRange;\n        }\n    }\n\n    toggleSwitch() {\n        return produce(this, draft => {\n            draft.powerOn = !draft.powerOn;\n        });\n    }\n\n    setSliderValue(newValue) {\n        return produce(this, draft => {\n            if (draft.slider) {\n                draft.sliderValue = newValue;\n            }\n        });\n    }\n}\n\nclass Room {\n    constructor(name) {\n        /*Room constructor get one arguments name: string\n        Room is immerable class to ensure state immutable*/\n        this[immerable] = true;\n        this.name = name; \n        this.deviceList = [];\n        this.roomSwitchOn = true;\n        //this.previously Power On are use for store previous room configuration after room toggling. \n        this.previouslyPowerOn = [];\n    }\n\n    addDevice(name) {\n        //This function return new Room with added device\n        let newDevice = new Device(name);\n\n        return produce(this, draft => {\n            draft.deviceList.push(newDevice);\n        });\n    }\n\n    removeDevice(deviceId) {\n        //This function return new Room with removed device\n        return produce(this, draft => {\n            draft.deviceList.splice(deviceId, 1);\n        });\n    }\n\n    toggleRoom() {\n        //This function return new Room object with toggled devices. \n        //Devices which can not be switch of from room level are still running. \n        return produce (this, draft => {\n            if (this.roomSwitchOn) {\n                /*When room is switch on current state is move to previous state\n                 and device which can be switch off are switch off. */\n                draft.roomSwitchOn = false;\n                // Save ids of devices powered on.\n                draft.previouslyPowerOn = draft.deviceList.filter(device => device.powerOn).map(device => device.id);\n                draft.deviceList = draft.deviceList.map(device => {\n                    // Don't turn off if important || or if turned off already\n                    if (device.isNonToggled || !device.powerOn) {\n                        return device;\n                    } else { \n                        return device.toggleSwitch();\n                    }\n                });\n            } else {\n                draft.deviceList = draft.deviceList.map(device => {\n                    // Don't turn on if turned on && only if was turned on before\n                    if (!device.powerOn && draft.previouslyPowerOn.includes(device.id)) {\n                        return device.toggleSwitch();\n                    } else { \n                        return device;\n                    }\n                });\n                draft.previouslyPowerOn = [];\n                draft.roomSwitchOn = true;\n            }\n        });\n    }\n}\n\nclass Home {\n    constructor(owner) {\n        /*Home is constructor get one arguments owner: string \n        (in future after adding log in function, \n        can get an object with id and photo and so on)\n        Home is immerable class to ensure state immutable*/\n        this[immerable] = true;\n\n        this.owner = owner;\n        this.roomList = [];\n\n        this.createDefaultRoom('Living room');\n    }\n\n    addRoom(roomName) {\n        let newRoom = new Room(roomName);\n\n        return produce(this, draft => {\n            draft.roomList.push(newRoom);\n        });\n    }\n\n    removeRoom(roomId) {\n        return produce(this, draft => {\n            draft.roomList.splice(roomId, 1);\n        });\n    }\n\n    createDefaultRoom(name) {\n        //Function to create room example\n        //Can be only run by constructor.\n        let defaultRoom = new Room(name);\n        let fridge = new Device('Fridge');\n        let lamp = new Device('Lamp');\n        let TV = new Device('TV');\n\n        let defaultWC = new Room('Bathroom');\n        let lampWC = new Device('Lamp');\n\n        defaultRoom.deviceList.push(fridge);\n        defaultRoom.deviceList.push(lamp);\n        defaultRoom.deviceList.push(TV);\n\n        defaultWC.deviceList.push(lampWC);\n\n        this.roomList.push(defaultRoom);\n        this.roomList.push(defaultWC);\n    }\n\n}\n\nexport {Home, Room, Device}; ","import actionsTypes from './state-manager/actionsTypes'; \n\nexport const setNewStorage = (newStorage) => (\n    {\n        type: actionsTypes.SET_STORAGE, \n        payload: {\n            newStorage\n        }\n    }\n);\n\nexport const addRoomAction = (newRoom) => (\n    {\n        type: actionsTypes.ADD_ROOM,\n        payload: {\n            newRoom,\n        }\n    }\n);\n\nexport const deleteRoomAction = (removedRoomId) => (\n    {\n        type: actionsTypes.REMOVE_ROME,\n        payload: {\n            removedRoomId,\n        }\n    }\n);\n\nexport const toggleRoomAction = (toggledRoomId) => (\n    {\n        type: actionsTypes.TOGGLE_ROOM,\n        payload: {\n            toggledRoomId,\n        }\n    }\n);\n\n\nexport const deleteDeviceAction = (roomId , deviceId) => (\n    {\n        type: actionsTypes.REMOVE_DEVICE,\n        payload: {\n            roomId,\n            deviceId\n        }\n    }\n);\n\nexport const addDeviceAction = (roomId , deviceName) => (\n    {\n        type: actionsTypes.ADD_DEVICE,\n        payload: {\n            roomId,\n            deviceName\n        }\n    }\n);\n\nexport const toggleDeviceAction = (roomId, deviceId) => (\n    {\n        type: actionsTypes.TOGGLE_DEVICE,\n        payload: {\n            roomId,\n            deviceId,\n        }\n    }\n);\n\nexport const setSlider = (roomId, deviceId, numericValue) => (\n    {\n        type: actionsTypes.SET_SLIDER,\n        payload: {\n            roomId,\n            deviceId,\n            numericValue\n        }\n    }\n);\n\n\n\n\n","//Font awsome import for icons\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\n\nimport './AddButton.css';\n\nfunction AddButton( {onClick} ) {\n    return <button className='add__button' onClick = {onClick}>\n        <FontAwesomeIcon icon={faPlus} />\n    </button>;\n}\n\nexport default AddButton;","import { useRef, useEffect } from 'react';  \n\nimport AddButton from './AddButton';\n\nfunction RoomInput({setIsRoomAdd, isRoomAdd, setRoomName, roomName, addRoom }) {\n    const cancelInput = useRef(null);\n\n    const handleClickOutside = (e) => {\n        if (cancelInput.current !== null && !cancelInput.current.contains(e.target)) {\n            setIsRoomAdd(false);\n        }\n    };\n\n    useEffect(() => {\n        //Component did mount - add event listener for cancel add room form.\n        document.addEventListener('mousedown', handleClickOutside);\n        return function cleanUp() {\n            //Component did unmount - cleanUp.\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    });\n\n    if (!isRoomAdd) {\n        return <AddButton onClick = {() => setIsRoomAdd(true)} />;\n    } else {\n        return <div className='display__flex' ref={cancelInput}>\n            <input \n                placeholder= 'Enter room name' \n                onChange = {(e) => setRoomName(e.target.value)}\n                value ={roomName}\n            />\n            <AddButton onClick = {addRoom} />\n        </div>;\n    }\n}\n\nexport default RoomInput;","import './SwitchSlider.css'; \n\nfunction SwitchSlider( {toggleAction, checkedValue} ) {\n\n    const onClick = (e) => {\n        e.stopPropagation();\n    };\n\n    return <label className=\"switch\" onClick={onClick}>\n        <input type=\"checkbox\" id=\"togBtn\" onChange ={toggleAction} checked = {checkedValue}/>\n        <div className=\"slider round\">\n            <span className=\"on\">On</span>\n            <span className=\"off\">Off</span>\n        </div>\n    </label>;\n}\n\nexport default SwitchSlider;","import './TrashButton.css';\n\n//Font awsome import for icons\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nfunction TrashButton( { onClick } ) {\n\n    const handleClick = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        onClick();\n    };\n\n    return <button className = 'delBtn' onClick = {handleClick}>\n        <FontAwesomeIcon icon={faTrash}/>\n    </button>;\n}\n\nexport default TrashButton;","import './DeleteMessage.css';\n\nfunction DeleteMessage( {deleteAction, CancelAction, elementName} ) {\n    return (\n        <div>\n            <p className='delete__message' >Are you sure you want to delete this {elementName}? </p>\n            <div  className='delete__btn-container'>\n                <button className = 'delete__btn' onClick = {deleteAction}>Yes</button>\n                <button className = 'delete__btn' onClick = {CancelAction}>No</button>\n            </div>\n        </div>\n    );\n}\n\nexport default DeleteMessage;","import { useState } from 'react'; \nimport { Link } from 'react-router-dom';\n\n//Components import\nimport SwitchSlider from './SwitchSlider';\nimport TrashButton from './TrashButton';\nimport DeleteMessage from './DeleteMessage';\n\nimport './RoomCard.css';\n\nfunction RoomCard({id, room , toggleRoom, delRoom }) {\n    const [roomRemoved, setRoomRemoved] = useState(false);\n    const handleToggle = () => {\n        toggleRoom(id);\n    };\n\n    const deleteRoom = () => {\n        delRoom(id);\n        setRoomRemoved(false);\n    };\n\n    if (!roomRemoved) {\n        return (\n            <Link to={`/room/${id}`}>\n                <div className = 'room'>\n                    <h4 className='room__name'>{ room.name }</h4>\n                    <p className = 'room__devices'>{ room.deviceList.length } devices</p>\n                    <div className = 'room__trash'>\n                        <TrashButton onClick = { () => setRoomRemoved(true) } />\n                    </div>\n                    <SwitchSlider toggleAction = {handleToggle} checkedValue = { room.roomSwitchOn }/>\n                </div>\n            </Link>\n        );\n    } else {\n        return (\n            <div className = 'room'>\n                <DeleteMessage  \n                    deleteAction = {deleteRoom} \n                    CancelAction = {() => setRoomRemoved(false)} \n                    elementName = {'room'}\n                />\n            </div>\n        );\n    }\n}\n\nexport default RoomCard;","import { useState } from 'react'; \n\nimport './HomePage.css';\n\n//Component import\nimport RoomInput from './RoomInput';\nimport RoomCard from './RoomCard';\n\nfunction HomePage( { addNewRoom, homeState, delRoom, toggleRoom } ) {\n    const [isRoomAdd, setIsRoomAdd] = useState(false);\n    const [roomName, setRoomName] = useState('');\n\n    const addRoom = () => {\n        if (roomName === '') {\n            alert('Enter room name');\n        } else {\n            setIsRoomAdd(false);\n            addNewRoom(roomName);\n            setRoomName('');\n        }\n    };\n\n    const roomsContainer = homeState.roomList.map((room, id) => {\n        return <RoomCard key={id} id = {id} room ={room} delRoom = {delRoom} toggleRoom = {toggleRoom}/>;\n    });\n\n    return (\n        <div className='home-page'>\n            <div className='home-page__header'>\n                <div className = 'home-page__header__user-info'>\n                    <img className = 'home-page__header__user-photo' src='user.png' alt='User 1' />\n                    <h2 className = 'heading-text'>Hello {homeState.owner}!</h2>\n                    <p className = 'paragraph-text'>Welcome to Home!</p>\n                </div>\n                <div className='home-page__header__add'>\n                    <RoomInput \n                        addRoom = {addRoom} \n                        isRoomAdd ={isRoomAdd}\n                        setIsRoomAdd={setIsRoomAdd}\n                        roomName = {roomName}\n                        setRoomName ={setRoomName}\n                    />\n                </div>\n            </div>\n            <div className ='rooms-container'>\n                {roomsContainer}\n            </div>\n        </div>\n    );\n}\n\nexport default HomePage;","import { useState } from 'react';\n\n//Components import\nimport SwitchSlider from './SwitchSlider';\nimport TrashButton from './TrashButton';\nimport DeleteMessage from './DeleteMessage';\n\nimport './DeviceCard.css'; \n\nimport availableDevices from '../available-devices';\n\n//Font awsome import for icons\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nfunction DeviceCard({device, toggleDevice, setSlider, deleteDevice , id  }) {\n    const [sliderValue, setSliderValue] = useState(device.sliderValue);\n    const [deviceRemoved, setDeviceRemoved] = useState(false);\n    \n    let deviceInfo = null;\n    let deviceSlider = null;\n\n    const handleToggle = () => {\n        toggleDevice(id);\n    };\n\n    const handleSlider = () => {\n        setSlider(id, sliderValue);\n    };\n\n    const handleRangeChange = (e) => {\n        const numericValue = Number(e.target.value);\n        setSliderValue(numericValue);\n    };\n\n    const deleteThisDevice = () => {\n        setDeviceRemoved(false);\n        deleteDevice( id );\n    };\n\n    if (device.slider) {\n        const [minRange, maxRange] = device.sliderRange;\n\n        deviceSlider = <div className = 'device-card__slider'>\n            <input \n                type = \"range\" \n                min = {minRange} \n                max = {maxRange} \n                value = {sliderValue} \n                onMouseUp = {handleSlider} \n                onTouchEnd = {handleSlider} \n                onChange = {handleRangeChange}\n            />\n        </div>;\n\n        const infoText = `${availableDevices[device.name].sliderDescription}: \n        ${sliderValue} \n        ${availableDevices[device.name].sliderUnits}`;\n\n        deviceInfo = <p className ='device-card__detail'>{infoText}</p>;\n    }\n    if (!deviceRemoved) {\n        return (\n            <div className ='device-card'>\n                <FontAwesomeIcon icon = {availableDevices[device.name].icon} className ='device-card__icon'/>\n                <div className ='device-card__info'>\n                    <h4 className ='device-card__name'>{device.name}</h4>\n                    {deviceInfo}\n                </div>\n                <SwitchSlider toggleAction = {handleToggle} checkedValue = {device.powerOn}/>\n                {deviceSlider}\n                <div className = 'device-card__trash'>\n                    <TrashButton onClick = {() => setDeviceRemoved(true)} />\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <div className = 'device-card__delete'>\n                <DeleteMessage  \n                    deleteAction = {deleteThisDevice}\n                    CancelAction = {() => setDeviceRemoved(false)} \n                    elementName = {'device'}\n                />\n            </div>\n        );\n    }\n}\n\nexport default DeviceCard;","import { useRef, useEffect } from 'react';  \n\n//Import React components. \nimport AddButton from './AddButton';\n\nimport availableDevices from '../available-devices';\n\nfunction DeviceInput({ addDevice, isDeviceAdded, setIsDeviceAdd, deviceName, setDeviceName }) {\n    const cancelInput = useRef(null);\n    const deviceOption = [];\n    let optionNr = 1;\n\n    const handleClickOutside = (e) => {\n        if (cancelInput.current !== null && !cancelInput.current.contains(e.target)) {\n            setIsDeviceAdd(false);\n        }\n    };\n\n    useEffect(() => {\n        //Component did mount - add event listener for cancel add device form.\n        document.addEventListener('mousedown', handleClickOutside);\n        return function cleanUp() {\n            //Component did unmount - cleanUp.\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    });\n\n    const defaultOptionValue = <option value=\"\" key = {0} disabled = {true} >Choose device</option>;\n    deviceOption.push(defaultOptionValue);\n\n    for (let propName in availableDevices) {\n        let key = optionNr++;\n        const option = <option key = {key} value={propName}>{propName}</option>;\n        deviceOption.push(option);\n    }\n\n    if (!isDeviceAdded) {\n        return <AddButton onClick = {() => setIsDeviceAdd(true)} />;\n    } else {\n        return <div className='display__flex' ref={cancelInput}>\n            <select className='margin-left-right-1' value = {deviceName} onChange = {(e) => setDeviceName(e.target.value)}>\n                {deviceOption}\n            </select>\n            <AddButton onClick = {() => addDevice(deviceName)} />\n        </div>;\n    }\n}\n\nexport default DeviceInput;","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport * as actions from '../actions';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\n\n//Import React components. \nimport DeviceCard from './DeviceCard';\nimport DeviceInput from './DeviceInput';\n\nimport './RoomPage.css';\n\nfunction RoomPage({ match }, homeState, dispatch) {\n    const [isDeviceAdded, setIsDeviceAdded] = useState(false);\n    const [deviceName, setDeviceName] = useState('');\n\n    const currentRoomId = Number(match.params.id);\n    const currentRoom = homeState.roomList[currentRoomId];\n\n    const deleteDevice = (deviceId) => {\n        if (typeof deviceId !== 'number') {\n            throw new Error('Device id should be typ of number');\n        }\n        dispatch(actions.deleteDeviceAction(currentRoomId, deviceId));\n    };\n\n    const addDevice = () => {\n        if (deviceName === '') {\n            alert('Enter device name');\n        } else {\n            setIsDeviceAdded(false);\n            dispatch(actions.addDeviceAction(currentRoomId, deviceName));\n            setDeviceName('');\n        }\n    };\n\n    const toggleDevice = (deviceId) => {\n        if (typeof deviceId !== 'number') {\n            throw new Error('Device id should be typ of number');\n        }\n        dispatch(actions.toggleDeviceAction(currentRoomId, deviceId));\n    };\n\n    const setSlider = (deviceId, numericValue) => {\n        if (typeof numericValue !== 'number') {\n            throw new Error('Value should be typ of number');\n        } else if (typeof deviceId !== 'number') {\n            throw new Error('Device id should be typ of number');\n        }\n        dispatch(actions.setSlider(currentRoomId, deviceId, numericValue));\n    };\n\n    const devicesContainers = currentRoom.deviceList.map((device, id) => {\n        return <DeviceCard \n            key={id} \n            id = {id} \n            device ={device} \n            toggleDevice = {toggleDevice} \n            setSlider = {setSlider}\n            deleteDevice = {deleteDevice}\n        />;\n    });\n\n    return (\n        <div className ='room-page'>\n            <div className ='room-page__header'>\n                <Link to='/' className ='room-page__back'>\n                    <FontAwesomeIcon icon = {faArrowLeft} />\n                </Link>\n                <h3 className ='room-page__name'>{currentRoom.name}</h3>\n                <div className='room-page__header__add'>\n                    <DeviceInput \n                        addDevice = {addDevice} \n                        isDeviceAdded ={isDeviceAdded}\n                        setIsDeviceAdd={setIsDeviceAdded}\n                        deviceName = {deviceName}\n                        setDeviceName ={setDeviceName}\n                    />\n                </div>\n            </div>\n            <div className ='room-page__devices'>\n                {devicesContainers}\n            </div>\n\n        </div>\n    );\n}\n\nexport default RoomPage;","import Loader from 'react-loader-spinner';\n\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nfunction LoaderSpinner() {\n    return(\n        <Loader\n            type=\"Oval\"\n            color=\"#fff\"\n            height={100}\n            width={100}\n            timeout={3000} //3 secs\n   \n        />\n    );\n}\n\nexport default LoaderSpinner;","import { useReducer, useEffect } from 'react'; \nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport './App.css';\n\n//Import public path.\nimport {publicPath} from './config';\n\n//Import state managements components. \nimport reducer from './state-manager/reducer';\nimport { Home } from './state-manager/class-model';\nimport * as actions from './actions';\nimport {  checkLocalStorage, setLocalStorage, getLocalStorage } from './state-manager/localStorageManager';\n\n//Import React components. \nimport HomePage from './components/HomePage';\nimport RoomPage from './components/RoomPage';\nimport LoaderSpinner from './components/Loader';\n\n\nconst NAME = 'my-smart-home-app';\nconst USER_NAME = 'Olga';\n\nfunction App() {\n    const [homeState, dispatch] = useReducer(reducer, null);\n\n    const addNewRoom = (roomName) => {\n        dispatch(actions.addRoomAction(roomName));\n    };\n\n    const delRoom = (roomId) => {\n        dispatch(actions.deleteRoomAction(roomId));\n    };\n\n    const toggleRoom = (roomId) => {\n        dispatch(actions.toggleRoomAction(roomId));\n    };\n\n    useEffect(() => {\n        if (homeState === null ) { \n            if ( checkLocalStorage(NAME)) {\n                const newStorage = getLocalStorage(NAME);\n                dispatch(actions.setNewStorage(newStorage));\n            } else {\n                const newStorage = new Home(USER_NAME);\n                dispatch(actions.setNewStorage(newStorage));\n            }\n        } else {\n            setLocalStorage(NAME, homeState);\n        }\n\n    }, [homeState]);\n\n    if (homeState === null) {\n        return (\n            <div className = 'loader'>\n                <LoaderSpinner />\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"App\">\n            <BrowserRouter basename={publicPath}>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <HomePage \n                            homeState = {homeState}\n                            addNewRoom = {addNewRoom}\n                            delRoom = {delRoom}\n                            toggleRoom = {toggleRoom}\n                        />\n                    </Route >\n                    <Route path='/room/:id' component={(m) => RoomPage(m, homeState, dispatch)} />\n                </Switch>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","import { Home, Room, Device } from './class-model';\n\nimport {immerable} from \"immer\";\n\nfunction checkLocalStorage(elementName) {\n    return !!localStorage.getItem(elementName);\n}\n\nfunction setLocalStorage(elementName, element) {\n    const oldStorage = localStorage.getItem(elementName);\n    const newStorage = JSON.stringify(element);\n    if (oldStorage === newStorage) return false;\n    localStorage.setItem(elementName, JSON.stringify(element));\n    return true;\n}\n\nfunction getLocalStorage(elementName) {\n    const storedProjects = JSON.parse(localStorage.getItem(elementName));\n    Object.setPrototypeOf(storedProjects, Home.prototype);\n    storedProjects[immerable] = true;\n\n    for (let room of storedProjects.roomList) {\n        room[immerable] = true;\n        Object.setPrototypeOf(room , Room.prototype);\n        for (let device of room.deviceList) {\n            device[immerable] = true;\n            Object.setPrototypeOf(device , Device.prototype);\n        }\n    }\n    return storedProjects;\n}\n\nexport { checkLocalStorage, setLocalStorage, getLocalStorage };","//Config file for setting public path.\nconst publicPath = '/move-closer-recruitment/';\n\nexport {publicPath};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}