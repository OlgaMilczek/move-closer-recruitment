{"version":3,"sources":["state-manager/actionsTypes.js","state-manager/reducer.js","available-devices.js","state-manager/class-model.js","components/AddButton.js","components/RoomInput.js","components/SwitchSlider.js","components/TrashButton.js","components/DeleteMessage.js","components/RoomCard.js","components/HomePage.js","components/DeviceCard.js","components/DeviceInput.js","components/RoomPage.js","actions.js","App.js","config.js","index.js"],"names":["actionsTypes","ADD_ROOM","REMOVE_ROME","TOGGLE_ROOM","ADD_DEVICE","REMOVE_DEVICE","TOGGLE_DEVICE","SET_SLIDER","reducer","state","action","type","addRoom","payload","newRoom","removeRoom","removedRoomId","produce","draft","roomList","toggledRoomId","toggleRoom","roomId","deviceName","addDevice","deviceId","removeDevice","deviceList","toggleSwitch","sliderValue","numericValue","setSliderValue","availableDevices","Lamp","name","slider","isNonToggled","icon","faLightbulb","sliderDescription","sliderUnits","sliderRange","defaultValue","Fridge","faSnowflake","faWind","TV","faTv","Device","undefined","Error","this","immerable","powerOn","alert","newValue","Room","roomSwitchOn","previousState","newDevice","push","splice","map","device","Home","owner","createDefaultRoom","roomName","defaultRoom","fridge","lamp","defaultWC","lampWC","AddButton","onClick","className","faPlus","RoomInput","props","cancelInput","useRef","handleClickOutside","e","current","contains","target","setIsRoomAdd","useEffect","document","addEventListener","removeEventListener","isRoomAdd","ref","placeholder","onChange","setRoomName","value","SwitchSlider","toggleAction","checkedValue","stopPropagation","id","checked","TrashButton","preventDefault","faTrash","DeleteMessage","deleteAction","CancelAction","elementName","RoomCard","useState","roomRemoved","setRoomRemoved","delRoom","to","room","length","HomePage","addNewRoom","homeState","roomsContainer","src","alt","DeviceCard","deviceRemoved","setDeviceRemoved","deviceInfo","deviceSlider","handleSlider","setSlider","minRange","maxRange","min","max","onMouseUp","onTouchEnd","Number","infoText","deleteDevice","toggleDevice","DeviceInput","isDeviceAdded","setIsDeviceAdd","setDeviceName","deviceOption","optionNr","defaultOptionValue","disabled","hidden","propName","key","option","RoomPage","dispatch","match","setIsDeviceAdded","currentRoomId","params","currentRoom","actions","devicesContainers","faArrowLeft","App","useReducer","basename","exact","path","component","m","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.493a663d.chunk.js","sourcesContent":["const actionsTypes = {\n    ADD_ROOM: 'addRoom', \n    REMOVE_ROME: 'removeRoom', \n    TOGGLE_ROOM: 'toggleRoom', \n    ADD_DEVICE: 'addDevice', \n    REMOVE_DEVICE: 'removeDevice', \n    TOGGLE_DEVICE: 'toggleDevice', \n    SET_SLIDER: 'setSlider',\n};\n\nexport default actionsTypes;\n","import actionsTypes from './actionsTypes';\nimport { produce } from 'immer';\n\n//Reducer for state management. \nconst reducer = (state, action) => {\n    //Switch for different actions on the state. \n    switch (action.type) {\n\n    case actionsTypes.ADD_ROOM: \n        return state.addRoom(action.payload.newRoom);\n    case actionsTypes.REMOVE_ROME: \n        return state.removeRoom(action.payload.removedRoomId);\n\n    case actionsTypes.TOGGLE_ROOM: \n        return produce(state, draft => {\n            draft.roomList[action.payload.toggledRoomId] = draft.roomList[action.payload.toggledRoomId].toggleRoom();\n        });\n\n    case actionsTypes.ADD_DEVICE: \n        return produce(state, draft => {\n            const roomId = action.payload.roomId;\n            const deviceName = action.payload.deviceName;\n            draft.roomList[roomId] =  draft.roomList[roomId].addDevice(deviceName);\n        });\n\n    case actionsTypes.REMOVE_DEVICE: \n        return produce(state, draft => {\n            const roomId = action.payload.roomId;\n            const deviceId = action.payload.deviceId;\n            draft.roomList[roomId] =  draft.roomList[roomId].removeDevice(deviceId);\n        });\n        \n    case actionsTypes.TOGGLE_DEVICE:\n        return produce(state, draft => {\n            const roomId = action.payload.roomId;\n            const deviceId = action.payload.deviceId;\n            draft.roomList[roomId].deviceList[deviceId] = draft.roomList[roomId].deviceList[deviceId].toggleSwitch();\n        });\n\n    case actionsTypes.SET_SLIDER:\n        return produce(state, draft => {\n            const roomId = action.payload.roomId;\n            const deviceId = action.payload.deviceId;\n            const sliderValue = action.payload.numericValue;\n            draft.roomList[roomId].deviceList[deviceId] = draft.roomList[roomId].deviceList[deviceId].setSliderValue(sliderValue);\n        });\n\n    default:\n        return state;\n    }\n};\n\nexport default reducer;\n","import { faLightbulb, faSnowflake, faWind, faTv } from '@fortawesome/free-solid-svg-icons';\n\nconst availableDevices = {\n    Lamp: {\n        name: 'Lamp',\n        slider: true,\n        isNonToggled: false,\n        icon: faLightbulb,\n        sliderDescription: 'Brightness',\n        sliderUnits: '%',\n        sliderRange: [0, 100],\n        defaultValue: 50\n    },\n\n    Fridge: {\n        name: 'Fridge',\n        slider: false,\n        isNonToggled: true,\n        icon: faSnowflake\n    },\n\n    'Air conditioner': {\n        name: 'Air conditioner',\n        slider: true,\n        isNonToggled: false,\n        icon: faWind,\n        sliderDescription: 'Temperature',\n        sliderUnits: '\\u00B0C',\n        sliderRange: [16, 30],\n        defaultValue: 20\n    },\n\n    TV: {\n        name: 'TV',\n        slider: true,\n        isNonToggled: false,\n        icon: faTv,\n        sliderDescription: 'Volume',\n        sliderUnits: '%',\n        sliderRange: [0, 100],\n        defaultValue: 30\n    }\n};\n\nexport default availableDevices;","import {immerable, produce} from 'immer';\n\nimport availableDevices from '../available-devices';\n\n//File for class model for state-structure. \n\nclass Device {\n\n    constructor(name) {\n        /*Device constructor get three arguments name: \n        string, slider: boolean, isNonToggled: boolean\n        Device is immerable class to ensure state immutable*/\n        if (availableDevices[name] === undefined) {\n            throw new Error('No such device!');\n        }\n        this[immerable] = true;\n        this.name = availableDevices[name].name;\n        this.slider = availableDevices[name].slider; \n        this.isNonToggled = availableDevices[name].isNonToggled;\n        this.powerOn = true;\n        if (this.slider) {\n            this.sliderValue = availableDevices[name].defaultValue;\n            this.sliderRange = availableDevices[name].sliderRange;\n        }\n    }\n\n    toggleSwitch() {\n        if (this.isNonToggled) {\n            alert('You can\\'t turn off this device');\n            return this;\n        }\n        return produce(this, draft => {\n            draft.powerOn = !draft.powerOn;\n        });\n    }\n\n    setSliderValue(newValue) {\n        return produce(this, draft => {\n            if (draft.slider) {\n                draft.sliderValue = newValue;\n            }\n        });\n    }\n}\n\nclass Room {\n    constructor(name) {\n        /*Room constructor get one arguments name: string\n        Room is immerable class to ensure state immutable*/\n        this[immerable] = true;\n        this.name = name; \n        this.deviceList = [];\n        this.roomSwitchOn = true;\n        //this.previousState are use for store previous room configuration after room toggling. \n        this.previousState = [];\n    }\n\n    addDevice(name) {\n        //This function return new Room with added device\n        let newDevice = new Device(name);\n\n        return produce(this, draft => {\n            draft.deviceList.push(newDevice);\n        });\n    }\n\n    removeDevice(deviceId) {\n        //This function return new Room with removed device\n        return produce(this, draft => {\n            draft.deviceList.splice(deviceId, 1);\n        });\n    }\n\n    toggleRoom() {\n        //This function return new Room object with toggled devices. \n        //Devices which can not be switch of from room level are still running. \n        return produce (this, draft => {\n            if (this.roomSwitchOn) {\n                /*When room is switch on current state is move to previous state\n                 and device which can be switch off are switch off. */\n                draft.roomSwitchOn = false;\n                draft.previousState = draft.deviceList;\n                draft.deviceList = draft.deviceList.map(device => {\n                    if (device.isNonToggled) {\n                        return device;\n                    } else {\n                        return device.toggleSwitch();\n                    }\n                });\n            } else {\n                draft.deviceList =  draft.previousState; \n                draft.previousState = [];\n                draft.roomSwitchOn = true;\n            }\n        });\n    }\n}\n\nclass Home {\n    constructor(owner) {\n        /*Home is constructor get one arguments owner: string \n        (in future after adding log in function, \n        can get an object with id and photo and so on)\n        Home is immerable class to ensure state immutable*/\n        this[immerable] = true;\n\n        this.owner = owner;\n        this.roomList = [];\n\n        this.createDefaultRoom('Living room');\n    }\n\n    addRoom(roomName) {\n        let newRoom = new Room(roomName);\n\n        return produce(this, draft => {\n            draft.roomList.push(newRoom);\n        });\n    }\n\n    removeRoom(roomId) {\n        return produce(this, draft => {\n            draft.roomList.splice(roomId, 1);\n        });\n    }\n\n    createDefaultRoom(name) {\n        //Function to create room example\n        let defaultRoom = new Room(name);\n        let fridge = new Device('Fridge');\n        let lamp = new Device('Lamp');\n        let TV = new Device('TV');\n\n        let defaultWC = new Room('Bathroom');\n        let lampWC = new Device('Lamp');\n\n        defaultRoom.deviceList.push(fridge);\n        defaultRoom.deviceList.push(lamp);\n        defaultRoom.deviceList.push(TV);\n\n        defaultWC.deviceList.push(lampWC);\n\n        this.roomList.push(defaultRoom);\n        this.roomList.push(defaultWC);\n    }\n\n}\n\nexport {Home, Room, Device}; ","//Font awsome import for icons\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\n\nimport './AddButton.css';\n\nfunction AddButton( {onClick} ) {\n    return <button className='add__button' onClick = {onClick}>\n        <FontAwesomeIcon icon={faPlus} />\n    </button>;\n}\n\nexport default AddButton;","import { useRef, useEffect } from 'react';  \n\nimport AddButton from './AddButton';\n\nfunction RoomInput(props) {\n    const cancelInput = useRef(null);\n\n    const handleClickOutside = (e) => {\n        if (cancelInput.current !== null && !cancelInput.current.contains(e.target)) {\n            props.setIsRoomAdd(false);\n        }\n    };\n\n    useEffect(() => {\n        //Component did mount - add event listener for cancel add room form.\n        document.addEventListener('mousedown', handleClickOutside);\n        return function cleanUp() {\n            //Component did unmount - cleanUp.\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    });\n\n    if (!props.isRoomAdd) {\n        return <AddButton onClick = {() => props.setIsRoomAdd(true)} />;\n    } else {\n        return <div className='display__flex' ref={cancelInput}>\n            <input \n                placeholder= 'Enter room name' \n                onChange = {(e) => props.setRoomName(e.target.value)}\n                value ={props.roomName}\n            />\n            <AddButton onClick = {props.addRoom} />\n        </div>;\n    }\n}\n\nexport default RoomInput;","import './SwitchSlider.css'; \n\nfunction SwitchSlider( {toggleAction, checkedValue} ) {\n\n    const onClick = (e) => {\n        e.stopPropagation();\n    };\n\n    return <label className=\"switch\" onClick={onClick}>\n        <input type=\"checkbox\" id=\"togBtn\" onChange ={toggleAction} checked = {checkedValue}/>\n        <div className=\"slider round\">\n            <span className=\"on\">On</span>\n            <span className=\"off\">Off</span>\n        </div>\n    </label>;\n}\n\nexport default SwitchSlider;","import './TrashButton.css';\n\n//Font awsome import for icons\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nfunction TrashButton( { onClick } ) {\n\n    const handleClick = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        onClick();\n    };\n\n    return <button className = 'delBtn' onClick = {handleClick}>\n        <FontAwesomeIcon icon={faTrash}/>\n    </button>;\n}\n\nexport default TrashButton;","import './DeleteMessage.css';\n\nfunction DeleteMessage( {deleteAction, CancelAction, elementName} ) {\n    return (\n        <div>\n            <p className='delete__message' >Are you sure you want to delete this {elementName}? </p>\n            <div  className='delete__btn-container'>\n                <button className = 'delete__btn' onClick = {deleteAction}>Yes</button>\n                <button className = 'delete__btn' onClick = {CancelAction}>No</button>\n            </div>\n        </div>\n    );\n}\n\nexport default DeleteMessage;","import { useState } from 'react'; \nimport { Link } from 'react-router-dom';\n\n//Components import\nimport SwitchSlider from './SwitchSlider';\nimport TrashButton from './TrashButton';\nimport DeleteMessage from './DeleteMessage';\n\nimport './RoomCard.css';\n\nfunction RoomCard(props) {\n    const [roomRemoved, setRoomRemoved] = useState(false);\n    const handleToggle = () => {\n        props.toggleRoom(props.id);\n    };\n\n    const deleteRoom = () => {\n        props.delRoom(props.id);\n        setRoomRemoved(false);\n    };\n\n    if (!roomRemoved) {\n        return (\n            <Link to={`/room/${props.id}`}>\n                <div className = 'room'>\n                    <h4 className='room__name'>{props.room.name}</h4>\n                    <p className = 'room__devices'>{props.room.deviceList.length} devices</p>\n                    <div className = 'room__trash'>\n                        <TrashButton onClick = { () => setRoomRemoved(true) } />\n                    </div>\n                    <SwitchSlider toggleAction = {handleToggle} checkedValue = {props.room.roomSwitchOn}/>\n                </div>\n            </Link>\n        );\n    } else {\n        return (\n            <div className = 'room'>\n                <DeleteMessage  \n                    deleteAction = {deleteRoom} \n                    CancelAction = {() => setRoomRemoved(false)} \n                    elementName = {'room'}\n                />\n            </div>\n        );\n    }\n}\n\nexport default RoomCard;","import { useState } from 'react'; \n\nimport './HomePage.css';\n\n//Component import\nimport RoomInput from './RoomInput';\nimport RoomCard from './RoomCard';\n\nfunction HomePage( { addNewRoom, homeState, delRoom, toggleRoom } ) {\n    const [isRoomAdd, setIsRoomAdd] = useState(false);\n    const [roomName, setRoomName] = useState('');\n\n    const addRoom = () => {\n        if (roomName === '') {\n            alert('Enter room name');\n        } else {\n            setIsRoomAdd(false);\n            addNewRoom(roomName);\n            setRoomName('');\n        }\n    };\n\n    const roomsContainer = homeState.roomList.map((room, id) => {\n        return <RoomCard key={id} id = {id} room ={room} delRoom = {delRoom} toggleRoom = {toggleRoom}/>;\n    });\n\n    return (\n        <div className='home-page'>\n            <div className='home-page__header'>\n                <div className = 'home-page__header__user-info'>\n                    <img className = 'home-page__header__user-photo' src='user.png' alt='User 1' />\n                    <h2 className = 'heading-text'>Hello {homeState.owner}!</h2>\n                    <p className = 'paragraph-text'>Welcome to Home!</p>\n                </div>\n                <div className='home-page__header__add'>\n                    <RoomInput \n                        addRoom = {addRoom} \n                        isRoomAdd ={isRoomAdd}\n                        setIsRoomAdd={setIsRoomAdd}\n                        roomName = {roomName}\n                        setRoomName ={setRoomName}\n                    />\n                </div>\n            </div>\n            <div className ='rooms-container'>\n                {roomsContainer}\n            </div>\n        </div>\n    );\n}\n\nexport default HomePage;","import { useState } from 'react';\n\n//Components import\nimport SwitchSlider from './SwitchSlider';\nimport TrashButton from './TrashButton';\nimport DeleteMessage from './DeleteMessage';\n\nimport './DeviceCard.css'; \n\nimport availableDevices from '../available-devices';\n\n//Font awsome import for icons\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nfunction DeviceCard(props) {\n    const [sliderValue, setSliderValue] = useState(props.device.sliderValue);\n    const [deviceRemoved, setDeviceRemoved] = useState(false);\n    \n    let deviceInfo = null;\n    let deviceSlider = null;\n\n    const handleToggle = () => {\n        props.toggleDevice(props.id);\n    };\n\n    const handleSlider = () => {\n        props.setSlider(props.id, sliderValue);\n    };\n\n    const handleRangeChange = (e) => {\n        const numericValue = Number(e.target.value);\n        setSliderValue(numericValue);\n    };\n\n    const deleteDevice = () => {\n        setDeviceRemoved(false);\n        props.deleteDevice(props.id);\n    };\n\n    if (props.device.slider) {\n        const minRange = props.device.sliderRange[0];\n        const maxRange = props.device.sliderRange[1];\n\n        deviceSlider = <div className = 'device-card__slider'>\n            <input \n                type = \"range\" \n                min = {minRange} \n                max = {maxRange} \n                value = {sliderValue} \n                onMouseUp = {handleSlider} \n                onTouchEnd = {handleSlider} \n                onChange = {handleRangeChange}\n            />\n        </div>;\n\n        const infoText = `${availableDevices[props.device.name].sliderDescription}: \n        ${sliderValue} \n        ${availableDevices[props.device.name].sliderUnits}`;\n\n        deviceInfo = <p className ='device-card__detail'>{infoText}</p>;\n    }\n    if (!deviceRemoved) {\n        return (\n            <div className ='device-card'>\n                <FontAwesomeIcon icon = {availableDevices[props.device.name].icon} className ='device-card__icon'/>\n                <div className ='device-card__info'>\n                    <h4 className ='device-card__name'>{props.device.name}</h4>\n                    {deviceInfo}\n                </div>\n                <SwitchSlider toggleAction = {handleToggle} checkedValue = {props.device.powerOn}/>\n                {deviceSlider}\n                <div className = 'device-card__trash'>\n                    <TrashButton onClick = {() => setDeviceRemoved(true)} />\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <div className = 'device-card__delete'>\n                <DeleteMessage  \n                    deleteAction = {deleteDevice} \n                    CancelAction = {() => setDeviceRemoved(false)} \n                    elementName = {'device'}\n                />\n            </div>\n        );\n    }\n}\n\nexport default DeviceCard;","import { useRef, useEffect } from 'react';  \n\nimport AddButton from './AddButton';\n\nimport availableDevices from '../available-devices';\n\nfunction DeviceInput({ addDevice, isDeviceAdded, setIsDeviceAdd, deviceName, setDeviceName }) {\n    const cancelInput = useRef(null);\n    const deviceOption = [];\n    let optionNr = 1;\n\n    const handleClickOutside = (e) => {\n        if (cancelInput.current !== null && !cancelInput.current.contains(e.target)) {\n            setIsDeviceAdd(false);\n        }\n    };\n\n    useEffect(() => {\n        //Component did mount - add event listener for cancel add device form.\n        document.addEventListener('mousedown', handleClickOutside);\n        return function cleanUp() {\n            //Component did unmount - cleanUp.\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    });\n\n    const defaultOptionValue = <option value=\"\" key = {0} disabled = {true} hidden = {true}>Choose device</option>;\n    deviceOption.push(defaultOptionValue);\n\n    for (let propName in availableDevices) {\n        let key = optionNr++;\n        const option = <option key = {key} value={propName}>{propName}</option>;\n        deviceOption.push(option);\n    }\n\n    if (!isDeviceAdded) {\n        return <AddButton onClick = {() => setIsDeviceAdd(true)} />;\n    } else {\n        return <div className='display__flex' ref={cancelInput}>\n            <select className='margin-left-right-1' onChange = {(e) => setDeviceName(e.target.value)}>\n                {deviceOption}\n            </select>\n            <AddButton onClick = {() => addDevice(deviceName)} />\n        </div>;\n    }\n}\n\nexport default DeviceInput;","import { useState } from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport * as actions from '../actions';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\n\nimport DeviceCard from './DeviceCard';\nimport DeviceInput from './DeviceInput';\n\nimport './RoomPage.css';\n\nfunction RoomPage({ match }, homeState, dispatch) {\n    const [isDeviceAdded, setIsDeviceAdded] = useState(false);\n    const [deviceName, setDeviceName] = useState('');\n\n    const currentRoomId = Number(match.params.id);\n    const currentRoom = homeState.roomList[currentRoomId];\n\n    const deleteDevice = (deviceId) => {\n        if (typeof deviceId !== 'number') {\n            throw new Error('Device id should be typ of number');\n        }\n        dispatch(actions.deleteDeviceAction(currentRoomId, deviceId));\n    };\n\n    const addDevice = () => {\n        if (deviceName === '') {\n            alert('Enter room name');\n        } else {\n            setIsDeviceAdded(false);\n            dispatch(actions.addDeviceAction(currentRoomId, deviceName));\n            setDeviceName('');\n        }\n    };\n\n    const toggleDevice = (deviceId) => {\n        if (typeof deviceId !== 'number') {\n            throw new Error('Device id should be typ of number');\n        }\n        dispatch(actions.toggleDeviceAction(currentRoomId, deviceId));\n    };\n\n    const setSlider = (deviceId, numericValue) => {\n        if (typeof numericValue !== 'number') {\n            throw new Error('Value should be typ of number');\n        } else if (typeof deviceId !== 'number') {\n            throw new Error('Device id should be typ of number');\n        }\n        dispatch(actions.setSlider(currentRoomId, deviceId, numericValue));\n    };\n\n    const devicesContainers = currentRoom.deviceList.map((device, id) => {\n        return <DeviceCard \n            key={id} \n            id = {id} \n            device ={device} \n            toggleDevice = {toggleDevice} \n            setSlider = {setSlider}\n            deleteDevice = {deleteDevice}\n        />;\n    });\n\n    return (\n        <div className ='room-page'>\n            <div className ='room-page__header'>\n                <Link to='/' className ='room-page__back'>\n                    <FontAwesomeIcon icon = {faArrowLeft} />\n                </Link>\n                <h3 className ='room-page__name'>{currentRoom.name}</h3>\n                <div className='room-page__header__add'>\n                    <DeviceInput \n                        addDevice = {addDevice} \n                        isDeviceAdded ={isDeviceAdded}\n                        setIsDeviceAdd={setIsDeviceAdded}\n                        deviceName = {deviceName}\n                        setDeviceName ={setDeviceName}\n                    />\n                </div>\n            </div>\n            <div className ='room-page__devices'>\n                {devicesContainers}\n            </div>\n\n        </div>\n    );\n}\n\nexport default RoomPage;","import actionsTypes from './state-manager/actionsTypes'; \n\nexport const addRoomAction = (newRoom) => (\n    {\n        type: actionsTypes.ADD_ROOM,\n        payload: {\n            newRoom,\n        }\n    }\n);\n\nexport const deleteRoomAction = (removedRoomId) => (\n    {\n        type: actionsTypes.REMOVE_ROME,\n        payload: {\n            removedRoomId,\n        }\n    }\n);\n\nexport const toggleRoomAction = (toggledRoomId) => (\n    {\n        type: actionsTypes.TOGGLE_ROOM,\n        payload: {\n            toggledRoomId,\n        }\n    }\n);\n\n\nexport const deleteDeviceAction = (roomId , deviceId) => (\n    {\n        type: actionsTypes.REMOVE_DEVICE,\n        payload: {\n            roomId,\n            deviceId\n        }\n    }\n);\n\nexport const addDeviceAction = (roomId , deviceName) => (\n    {\n        type: actionsTypes.ADD_DEVICE,\n        payload: {\n            roomId,\n            deviceName\n        }\n    }\n);\n\nexport const toggleDeviceAction = (roomId, deviceId) => (\n    {\n        type: actionsTypes.TOGGLE_DEVICE,\n        payload: {\n            roomId,\n            deviceId,\n        }\n    }\n);\n\nexport const setSlider = (roomId, deviceId, numericValue) => (\n    {\n        type: actionsTypes.SET_SLIDER,\n        payload: {\n            roomId,\n            deviceId,\n            numericValue\n        }\n    }\n);\n\n\n\n\n","import { useReducer } from 'react'; \nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport './App.css';\n\n//Import public path.\nimport {publicPath} from './config';\n\n//Import state managements components. \nimport reducer from './state-manager/reducer';\nimport { Home } from './state-manager/class-model';\nimport * as actions from './actions';\n\n//Import React components. \nimport HomePage from './components/HomePage';\nimport RoomPage from './components/RoomPage';\n\nfunction App() {\n    const [homeState, dispatch] = useReducer(reducer, new Home('Olga'));\n\n    const addNewRoom = (roomName) => {\n        dispatch(actions.addRoomAction(roomName));\n    };\n\n    const delRoom = (roomId) => {\n        dispatch(actions.deleteRoomAction(roomId));\n    };\n\n    const toggleRoom = (roomId) => {\n        dispatch(actions.toggleRoomAction(roomId));\n    };\n\n    return (\n        <div className=\"App\">\n            <BrowserRouter basename={publicPath}>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <HomePage \n                            homeState = {homeState}\n                            addNewRoom = {addNewRoom}\n                            delRoom = {delRoom}\n                            toggleRoom = {toggleRoom}\n                        />\n                    </Route >\n                    <Route path='/room/:id' component={(m) => RoomPage(m, homeState, dispatch)} />\n                </Switch>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","//Config file for setting public path.\nconst publicPath = '/move-closer-recruitment/';\n\nexport {publicPath};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}